{"tagline":"jquery online css editor, themeroller like tool for customizing your web page","body":"# Live CSS Editor\r\n\r\n## Overview\r\n\r\nLive CSS Editor (LCE) is jquery plugin, \"themeroller like\" tool for customizing your web page design. Basically, you provide json with configuration and LCE shows: live preview and CSS editor with ability to edit properties you defined. So you can control which properties can be customized.\r\n\r\n## Demo\r\n\r\nhttp://rukavina.github.com/live-css-editor\r\n\r\n## Installation and setup\r\n\r\nYou have to include this dependencies in your page (head):\r\n\r\n```html\r\n<script src=\"js/jquery-1.7.1.min.js\"></script>\r\n<script src=\"js/microtpl.js\"></script>\r\n<!-- lce itself -->\r\n<script src=\"js/jquery.livecsseditor.js\"></script>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/livecsseditor.css\">\r\n<script src=\"js/lce.editors.js\"></script>\r\n<!-- colorpicker -->\r\n<link rel=\"stylesheet\" media=\"screen\" type=\"text/css\" href=\"plugins/colorpicker/css/colorpicker-bootstrap.css\"/>\r\n<script type=\"text/javascript\" src=\"plugins/colorpicker/js/colorpicker-bootstrap.js\"></script>\r\n<!-- twitter bootstrap -->\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"plugins/bootstrap/css/bootstrap.min.css\"  media=\"screen\">\r\n<script src=\"plugins/bootstrap/js/bootstrap.min.js\"></script>\r\n```\r\n\r\nIn the page's body provide div where editor will be placed - give it enough space. Note: there cannot be 2 LCEs on a single page.\r\n\r\n```html\r\n<div id=\"lce\"></div> \r\n```\r\n\r\nInit LCE when document is ready, ex.\r\n\r\n```javascript\r\n    $('#lce').livecsseditor({\r\n        pages: {\r\n            'demo/index.html': {\r\n                name: 'Demo page',\r\n                def: {\r\n                    'h1':{\r\n                        name: 'Heading',\r\n                        props:['color','background-color']\r\n                    },\r\n                    'p,span':{\r\n                        name: 'Text',\r\n                        props:['font-size','color']\r\n                    }            \r\n                }\r\n            },\r\n            'demo/second.html': {\r\n                name: 'Second page',\r\n                def: {\r\n                    'h2':{\r\n                        name: 'Heading 2',\r\n                        props:['color']\r\n                    },\r\n                    'em':{\r\n                        name: 'Text',\r\n                        props:['font-size']\r\n                    }            \r\n                }\r\n            }\r\n        }\r\n    });\r\n```\r\n\r\nOptions json has a list of pages with urls to be customized and json definition of selector/properties which can be altered in LCE.\r\n\r\nAfter customization is done, you would like to grab CSS:\r\n\r\n```javascript\r\n  $('#lce').livecsseditor('getCss',{pagePath:'demo/index.html'})\r\n```\r\n\r\nThis will return css for just a page with provided path...but you could do\r\n\r\n```javascript\r\n  $('#lce').livecsseditor('getCss');\r\n```\r\n\r\nand get single CSS string for all pages.\r\n\r\n## Use Case\r\n\r\nPossible use case could be backend of your website where you can provide admin ability to develop his own custom skin without CSS knowledge. In WYSIWYG fashion he will be able to customize look and feel by live previewing front-end pages during customization.\r\nGenerated CSS could be stored in file/db and used by the frontend rendering engine to overwrite default css.\r\n\r\n## Custom property editors\r\n\r\nAt the moment LCE doesn't come with many specialized css property editors. Besides color picker for \"color\" and \"background-color\", there's only generic input field editor. It doesn't help you much if you are not familiar with CSS and possible values for each property.\r\nFortunately, there's an easy way to develop your own editors and attach to LCE. Here's how specialized color editor is done :\r\n\r\n* Create new .js file\r\n* write there something like:\r\n\r\n```javascript\r\n(function(){\r\n    //color\r\n    $.fn.livecsseditor.setPropertyEditor(['color','background-color'],function colorEditorCallback(options){\r\n        var html = '<form class=\"form-inline\"><div class=\"input-append color\" data-color=\"' + options.value + '\" data-color-format=\"rgb\"><input type=\"text\" value=\"' + options.value + '\" /><span class=\"add-on\"><i style=\"background-color: ' + options.value + '\"></i></span></div><a class=\"btn\" href=\"#\"><i class=\" icon-ok\"></i></a></form>';\r\n        options.container.html(html);\r\n        options.container.find('div.color').colorpicker();\r\n        options.container.find('a.btn').click(function(){\r\n            options.setValue(options.container.find('input').val());\r\n            return false; \r\n        });        \r\n    });  \r\n    \r\n})();\r\n```\r\n\r\nBasically, you just call *$.fn.livecsseditor.setPropertyEditor* and provide callback which renders your property editor. *options* is an object:\r\n\r\n```javascript\r\n{\r\n    'container':valueContainer,//div container\r\n    'selector': propSelector,//css selector\r\n    'prop':prop,//property name\r\n    'value':props[propSelector].values[prop],//current value\r\n    'setValue':function(value){//set value callback\r\n    }\r\n}\r\n```\r\n\r\n## Credits\r\n\r\nThis projects was inspired or uses the following projects:\r\n\r\n* [jquery](http://jquery.com/)\r\n* [JavaScript Micro-Templating](JavaScript Micro-Templating)\r\n* [twitter bootstrap](http://twitter.github.com/bootstrap/)\r\n* [jquery themeroller](http://jqueryui.com/themeroller/)\r\n* [bootstrap colorpicker](http://www.eyecon.ro/bootstrap-colorpicker)\r\n\r\n## Licence\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2012 Milan Rukavina\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Live-css-editor","google":""}